uniform float fieldOfView;
uniform mat4  camera2World;

uniform primitive environmentPrimitive;

void setup()
{
	rl_OutputRayCount = 1;
}

void main()
{
	float tanTheta    = tan(fieldOfView / 2.0);
	float aspectRatio = rl_FrameSize.x   / rl_FrameSize.y;
	vec2  frameCoord  = rl_FrameCoord.xy / rl_FrameSize.xy * vec2(2) - vec2(1);
	float px = frameCoord.x * (tanTheta * aspectRatio) ;
	float py = frameCoord.y * tanTheta;
	vec4 rayCameraPos = vec4(0, 0, 0, 1);
	vec4 rayWorldPos = camera2World * rayCameraPos;
	vec3 rayCameraDir = vec3(px, py, -1);
	mat3 orientationMat = mat3(camera2World[0].xyz, camera2World[1].xyz, camera2World[2].xyz);
	vec3 rayWorldDir = orientationMat * rayCameraDir;
	createRay();
	rl_OutRay.origin           = rayWorldPos.xyz;
	rl_OutRay.direction        = normalize(rayWorldDir);
	rl_OutRay.defaultPrimitive = environmentPrimitive;
	emitRay();
}